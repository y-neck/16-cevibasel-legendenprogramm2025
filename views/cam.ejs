<!DOCTYPE html>
<html lang="de">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="üìº PicassoControl ‚Äì <%= camId %>">
    <meta name="author" content="(c) 2025 https://github.com/y-neck">
    <link rel="stylesheet" href="/output.css">
    <title>üìº PicassoControl ‚Äì <%= camName %>
    </title>
</head>

<body class="bg-gray-900 min-h-screen">
    <header class=" bg-gray-600 p-5 flex flex-col items-center h-fit w-full">
        <div id="logo" class="self-start">
            <a href="/" class="text-white">üìº PicassoControl</a>
        </div>
        <h1 class="text-white text-5xl text-center">√úberwachungskamera</h1>
        <h2 class="text-3xl text-white text-center">
            <%= camName %>
        </h2>
    </header>
    <main class="flex flex-col">
        <a href="/" class="text-white m-5 p-2 bg-gray-600 rounded-lg text-center text-lg w-fit">‚Üê¬†Zur√ºck zur
            √úbersicht</a>
        <div class="cam-container">
            <div class="cam-viewer w-1/2 max-h-[900px] border-2 border-gray-600 rounded-lg text-white" alt="Kamerabild"
                data-cam-id="<%= camId %>">
                <img src="/upload/default.png">
            </div>
        </div>
    </main>

</body>

<script src="/scripts/media-upload.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Load camStorage from sessionStorage
        const camStorage = JSON.parse(sessionStorage.getItem('camStorage') || '{}');
        // Update images
        if (Object.keys(camStorage).length > 0) {
            document.querySelectorAll('.cam-viewer').forEach(viewer => {
                const camId = viewer.dataset.camId;
                if (camStorage[camId]) {
                    const newSrc = camStorage[camId];
                    // Infer extension from newSrc
                    const extension = newSrc.split('.').pop().toLowerCase();
                    const isVideo = (extension === 'mp4');

                    // Find the current media element (img or video)
                    let mediaElement = viewer.querySelector('img') || viewer.querySelector('video');
                    if (!mediaElement) {
                        console.error('No media element found for camId:', camId);
                        return;
                    }

                    // If the stored file is a video but current element is not a video, replace it
                    if (isVideo && mediaElement.tagName.toLowerCase() !== 'video') {
                        mediaElement.remove();
                        const videoElem = document.createElement('video');
                        videoElem.src = newSrc;
                        videoElem.classList.add('cam-viewer-img');
                        // Video playback handling
                        videoElem.autoplay = true;                 // JS property
                        videoElem.muted = true;                   // JS property
                        videoElem.playsInline = true;             // JS property
                        videoElem.setAttribute('autoplay', '');   // HTML attribute
                        videoElem.setAttribute('muted', '');      // HTML attribute
                        videoElem.setAttribute('playsinline', ''); // HTML attribute
                        viewer.appendChild(videoElem);
                        console.log(`Replaced image with video for ${camId}: ${newSrc}`);
                    }
                    // If new type is image but current element is not an image, replace it
                    else if (!isVideo && mediaElement.tagName.toLowerCase() !== 'img') {
                        mediaElement.remove();
                        const imgElem = document.createElement('img');
                        imgElem.src = newSrc;
                        imgElem.classList.add('cam-viewer-img');
                        imgElem.alt = 'Kamerabild';
                        imgElem.onerror = () => { imgElem.src = '/upload/default.png'; };
                        viewer.appendChild(imgElem);
                        console.log(`Replaced video with image for ${camId}: ${newSrc}`);
                    }
                    else {
                        // If element type is correct, simply update the src if needed
                        if (mediaElement.src !== newSrc) {
                            mediaElement.src = newSrc;
                            console.log(`Media src updated for ${camId}: ${newSrc}`);
                        }
                    }

                }
            })
        }
    });
</script>

<style>
    .cam-viewer,
    .cam-viewer img,
    video {
        @apply aspect-video w-1/2 max-h-[900px] object-contain;
    }
</style>

</html>